
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL ANULAR ARROW BOOLEAN BOOLEAN_TXT CLOSE_P COMMA DELAY DISTINCT DIVIDE ELSE EQUALS EQUALS_EQUALS EXP FOR FUNCTION IF IN INDEX INT INTEGER_TXT INT_DIV LESS_EQUAL LESS_THAN LET MIDDLE MIL MIN MINUS MORE_EQUAL MORE_THAN MOVE MULTIPLY OPEN_P OPERA PINKY PLUS PRINT PyC RETURN SB1 SB2 SEG SQ1 SQ2 STR THUMB VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_function\n            | empty\n    \n    algorithm_function : method_def\n                        | function_def\n    \n    var_type : BOOLEAN_TXT\n            | INTEGER_TXT\n    \n    function_def : FUNCTION VARIABLE OPEN_P parameters CLOSE_P ARROW var_type SB1 statement SB2\n    \n    method_def : FUNCTION VARIABLE OPEN_P parameters CLOSE_P SB1 statement SB2\n    \n        parameters : parameters COMMA parameters\n                    | VARIABLE\n                    | empty\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    fingers : THUMB\n            | INDEX\n            | MIDDLE\n            | ANULAR\n            | PINKY\n            | ALL\n    \n    fingerL_A : SQ1 fingers COMMA fingerL_B\n    \n    fingerL_B : fingers COMMA fingerL_B\n              | fingerL_C\n    \n    fingerL_C : fingers SQ2\n              | empty\n    \n    hand : fingerL_A fingerL_B fingerL_C\n    \n    function_move : MOVE OPEN_P fingers COMMA BOOLEAN CLOSE_P\n                  | MOVE OPEN_P fingers COMMA VARIABLE CLOSE_P\n                  | MOVE OPEN_P hand COMMA BOOLEAN CLOSE_P\n                  | MOVE OPEN_P hand COMMA VARIABLE CLOSE_P\n    \n    stringL_A : STR COMMA stringL_B\n              | VARIABLE COMMA stringL_B\n              | BOOLEAN COMMA stringL_B\n              | INT COMMA stringL_B\n    \n    stringL_B : STR COMMA stringL_B\n              | VARIABLE COMMA stringL_B\n              | INT COMMA stringL_B\n              | BOOLEAN COMMA stringL_B\n              | stringL_C\n    \n    stringL_C : STR\n              | VARIABLE\n              | BOOLEAN\n              | INT\n              | empty\n    \n    Cstring : stringL_A stringL_B stringL_C\n    \n    function_print : PRINT OPEN_P STR CLOSE_P\n                   | PRINT OPEN_P VARIABLE CLOSE_P\n                   | PRINT OPEN_P BOOLEAN CLOSE_P\n                   | PRINT OPEN_P INT CLOSE_P\n                   | PRINT OPEN_P Cstring CLOSE_P\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n        bool_operator : EQUALS_EQUALS\n                    | DISTINCT\n                    | LESS_EQUAL\n                    | MORE_EQUAL\n                    | MORE_THAN\n                    | LESS_THAN\n    \n    expression : expression bool_operator expression\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 statement SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 statement SB2\n              | FOR INT IN INT dDOT_E INT SB1 statement SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2\n    \n        if_else : IF expression SB1 statement SB2 else_if\n    \n        else_if : ELSE IF expression SB1 statement SB2 else_if\n                | else_exp\n    \n        else_exp : ELSE SB1 statement SB2\n                | empty\n    \n    statement : statement statement_line\n            | empty\n    \n    statement_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop\n                    | while_loop\n                    | function_move PyC\n                    | function_delay PyC\n                    | function_print PyC\n    \n    time_param : SEG\n                | MIL\n                | MIN\n    \n    function_delay : DELAY OPEN_P INT COMMA time_param CLOSE_P\n    \n    statement_line : RETURN expression PyC\n    \n    while_loop : WHILE OPEN_P expression CLOSE_P SB1 statement SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n              | function_call\n    \n    expression : VARIABLE\n    \n    function_call : VARIABLE OPEN_P param_expressions CLOSE_P\n    \n    param_expressions : param_expressions COMMA param_expressions\n                    | expression\n                    | empty\n    '
    
_lr_action_items = {'FUNCTION':([0,1,2,3,4,5,23,104,],[-88,6,-2,-1,-3,-4,-8,-7,]),'$end':([0,1,2,3,4,5,23,104,],[-88,0,-2,-1,-3,-4,-8,-7,]),'VARIABLE':([6,8,13,14,17,18,24,25,28,29,33,34,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,68,69,74,75,83,103,106,107,108,113,114,122,124,126,128,130,131,132,133,134,135,136,138,144,158,159,160,161,167,168,169,170,171,173,174,175,180,188,189,190,191,192,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[7,9,9,-88,22,-73,-72,-74,-77,-78,22,22,62,64,-88,22,-75,22,-55,-56,-57,-58,-59,-60,-76,-79,-80,-81,22,99,22,-86,-88,22,133,22,22,22,146,148,133,133,133,133,164,-42,-43,-44,-46,-45,-47,-88,-88,-34,-35,-36,-37,133,133,133,133,-67,-69,-71,22,22,-38,-39,-40,-41,22,-88,-88,-88,-88,-88,-87,22,22,22,22,22,-88,-70,-63,-65,-64,-66,22,-88,-68,]),'OPEN_P':([7,22,35,41,42,43,44,],[8,46,61,65,66,67,68,]),'CLOSE_P':([8,9,10,11,13,16,22,36,37,38,46,70,71,72,73,86,98,99,100,101,102,103,105,106,122,124,126,128,130,131,132,133,134,135,136,137,145,146,147,148,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,188,189,190,191,194,202,],[-88,-10,12,-11,-88,-9,-92,-89,-90,-91,-88,105,-95,-96,-61,112,121,123,125,127,129,-88,-93,-88,-88,-88,-88,-88,-88,-42,-43,-44,-46,-45,-47,-94,181,182,183,184,187,-82,-83,-84,-34,-35,-36,-37,-48,-43,-44,-45,-46,-88,-88,-88,-88,-38,-39,-40,-41,202,-54,]),'COMMA':([8,9,10,11,13,16,22,36,37,38,46,70,71,72,73,76,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,97,98,99,100,101,105,106,115,116,117,118,119,132,133,134,135,137,139,149,151,152,153,185,186,202,],[-88,-10,13,-11,-88,13,-92,-89,-90,-91,-88,106,-95,-96,-61,108,-12,-13,-14,-15,-16,-17,113,114,-18,-19,-20,-21,-22,-23,-88,120,122,124,126,128,-93,-88,-88,-26,151,-28,153,167,168,169,170,106,175,-29,-88,-27,-88,-25,-24,-54,]),'SB1':([12,19,20,21,22,36,37,38,60,73,105,112,172,176,177,178,179,200,202,],[14,45,-5,-6,-92,-89,-90,-91,75,-61,-93,144,193,195,196,197,198,207,-54,]),'ARROW':([12,],[15,]),'SB2':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,23,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,104,-86,-88,138,-88,-88,-67,-69,-71,199,-88,-88,-88,-88,-88,-87,208,209,210,211,212,-88,-70,-63,-65,-64,-66,214,-88,-68,]),'RETURN':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,33,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,33,-86,-88,33,-88,-88,-67,-69,-71,33,-88,-88,-88,-88,-88,-87,33,33,33,33,33,-88,-70,-63,-65,-64,-66,33,-88,-68,]),'IF':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,172,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,34,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,34,-86,-88,34,-88,-88,-67,192,-69,-71,34,-88,-88,-88,-88,-88,-87,34,34,34,34,34,-88,-70,-63,-65,-64,-66,34,-88,-68,]),'OPERA':([14,17,18,24,25,28,29,33,34,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,69,74,75,83,106,107,108,138,144,171,173,174,175,180,192,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,35,-73,-72,-74,-77,-78,35,35,-88,35,-75,35,-55,-56,-57,-58,-59,-60,-76,-79,-80,-81,35,35,-86,-88,35,35,35,35,-88,-88,-67,-69,-71,35,35,35,-88,-88,-88,-88,-88,-87,35,35,35,35,35,-88,-70,-63,-65,-64,-66,35,-88,-68,]),'INT':([14,17,18,24,25,28,29,33,34,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,67,68,69,74,75,83,84,85,103,106,107,108,122,124,126,128,130,131,132,133,134,135,136,138,140,141,142,143,144,158,159,160,161,167,168,169,170,171,173,174,175,180,188,189,190,191,192,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,36,-73,-72,-74,-77,-78,36,36,63,-88,36,-75,36,-55,-56,-57,-58,-59,-60,-76,-79,-80,-81,36,97,101,36,-86,-88,36,110,111,134,36,36,36,134,134,134,134,166,-42,-43,-44,-46,-45,-47,-88,176,177,178,179,-88,-34,-35,-36,-37,134,134,134,134,-67,-69,-71,36,36,-38,-39,-40,-41,36,-88,-88,-88,-88,-88,-87,36,36,36,36,36,-88,-70,-63,-65,-64,-66,36,-88,-68,]),'BOOLEAN':([14,17,18,24,25,28,29,33,34,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,68,69,74,75,83,103,106,107,108,113,114,122,124,126,128,130,131,132,133,134,135,136,138,144,158,159,160,161,167,168,169,170,171,173,174,175,180,188,189,190,191,192,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,37,-73,-72,-74,-77,-78,37,37,-88,37,-75,37,-55,-56,-57,-58,-59,-60,-76,-79,-80,-81,37,100,37,-86,-88,37,135,37,37,37,145,147,135,135,135,135,165,-42,-43,-44,-46,-45,-47,-88,-88,-34,-35,-36,-37,135,135,135,135,-67,-69,-71,37,37,-38,-39,-40,-41,37,-88,-88,-88,-88,-88,-87,37,37,37,37,37,-88,-70,-63,-65,-64,-66,37,-88,-68,]),'LET':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,39,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,39,-86,-88,39,-88,-88,-67,-69,-71,39,-88,-88,-88,-88,-88,-87,39,39,39,39,39,-88,-70,-63,-65,-64,-66,39,-88,-68,]),'FOR':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,40,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,40,-86,-88,40,-88,-88,-67,-69,-71,40,-88,-88,-88,-88,-88,-87,40,40,40,40,40,-88,-70,-63,-65,-64,-66,40,-88,-68,]),'WHILE':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,41,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,41,-86,-88,41,-88,-88,-67,-69,-71,41,-88,-88,-88,-88,-88,-87,41,41,41,41,41,-88,-70,-63,-65,-64,-66,41,-88,-68,]),'MOVE':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,42,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,42,-86,-88,42,-88,-88,-67,-69,-71,42,-88,-88,-88,-88,-88,-87,42,42,42,42,42,-88,-70,-63,-65,-64,-66,42,-88,-68,]),'DELAY':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,43,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,43,-86,-88,43,-88,-88,-67,-69,-71,43,-88,-88,-88,-88,-88,-87,43,43,43,43,43,-88,-70,-63,-65,-64,-66,43,-88,-68,]),'PRINT':([14,17,18,24,25,28,29,45,47,55,56,57,58,69,74,75,107,138,144,171,173,174,180,193,195,196,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,],[-88,44,-73,-72,-74,-77,-78,-88,-75,-76,-79,-80,-81,44,-86,-88,44,-88,-88,-67,-69,-71,44,-88,-88,-88,-88,-88,-87,44,44,44,44,44,-88,-70,-63,-65,-64,-66,44,-88,-68,]),'BOOLEAN_TXT':([15,],[20,]),'INTEGER_TXT':([15,],[21,]),'PyC':([22,26,27,30,31,32,36,37,38,59,73,105,109,121,123,125,127,129,181,182,183,184,187,202,],[-92,47,55,56,57,58,-89,-90,-91,74,-61,-93,-62,-49,-50,-51,-52,-53,-30,-31,-32,-33,-85,-54,]),'EQUALS_EQUALS':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,49,-89,-90,-91,49,49,49,49,49,-93,49,49,49,49,-54,]),'DISTINCT':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,50,-89,-90,-91,50,50,50,50,50,-93,50,50,50,50,-54,]),'LESS_EQUAL':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,51,-89,-90,-91,51,51,51,51,51,-93,51,51,51,51,-54,]),'MORE_EQUAL':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,52,-89,-90,-91,52,52,52,52,52,-93,52,52,52,52,-54,]),'MORE_THAN':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,53,-89,-90,-91,53,53,53,53,53,-93,53,53,53,53,-54,]),'LESS_THAN':([22,26,36,37,38,59,60,71,73,86,105,109,139,194,200,202,],[-92,54,-89,-90,-91,54,54,54,54,54,-93,54,54,54,54,-54,]),'PLUS':([61,],[77,]),'MINUS':([61,],[78,]),'INT_DIV':([61,],[79,]),'DIVIDE':([61,],[80,]),'EXP':([61,],[81,]),'MULTIPLY':([61,],[82,]),'EQUALS':([62,],[83,]),'IN':([63,64,],[84,85,]),'THUMB':([66,95,96,115,116,118,151,152,153,185,186,],[89,89,89,89,-26,-28,89,-27,89,-25,-24,]),'INDEX':([66,95,96,115,116,118,151,152,153,185,186,],[90,90,90,90,-26,-28,90,-27,90,-25,-24,]),'MIDDLE':([66,95,96,115,116,118,151,152,153,185,186,],[91,91,91,91,-26,-28,91,-27,91,-25,-24,]),'ANULAR':([66,95,96,115,116,118,151,152,153,185,186,],[92,92,92,92,-26,-28,92,-27,92,-25,-24,]),'PINKY':([66,95,96,115,116,118,151,152,153,185,186,],[93,93,93,93,-26,-28,93,-27,93,-25,-24,]),'ALL':([66,95,96,115,116,118,151,152,153,185,186,],[94,94,94,94,-26,-28,94,-27,94,-25,-24,]),'SQ1':([66,],[96,]),'STR':([68,103,122,124,126,128,130,131,132,133,134,135,136,158,159,160,161,167,168,169,170,188,189,190,191,],[98,132,132,132,132,132,163,-42,-43,-44,-46,-45,-47,-34,-35,-36,-37,132,132,132,132,-38,-39,-40,-41,]),'SQ2':([89,90,91,92,93,94,117,150,],[-18,-19,-20,-21,-22,-23,152,152,]),'dDOT':([110,111,],[140,142,]),'dDOT_E':([110,111,],[141,143,]),'SEG':([120,],[155,]),'MIL':([120,],[156,]),'MIN':([120,],[157,]),'ELSE':([138,214,],[172,172,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,],[1,]),'empty':([0,8,13,14,45,46,75,95,103,106,115,122,124,126,128,130,138,144,151,153,167,168,169,170,193,195,196,197,198,207,214,],[2,11,11,18,18,72,18,118,136,72,118,136,136,136,136,136,174,18,118,118,136,136,136,136,18,18,18,18,18,18,174,]),'algorithm_function':([1,],[3,]),'method_def':([1,],[4,]),'function_def':([1,],[5,]),'parameters':([8,13,],[10,16,]),'statement':([14,45,75,144,193,195,196,197,198,207,],[17,69,107,180,201,203,204,205,206,213,]),'var_type':([15,],[19,]),'statement_line':([17,69,107,180,201,203,204,205,206,213,],[24,24,24,24,24,24,24,24,24,24,]),'if_else':([17,69,107,180,201,203,204,205,206,213,],[25,25,25,25,25,25,25,25,25,25,]),'expression':([17,33,34,46,48,65,69,83,106,107,108,175,180,192,201,203,204,205,206,213,],[26,59,60,71,73,86,26,109,71,26,139,194,26,200,26,26,26,26,26,26,]),'var_assign':([17,69,107,180,201,203,204,205,206,213,],[27,27,27,27,27,27,27,27,27,27,]),'for_loop':([17,69,107,180,201,203,204,205,206,213,],[28,28,28,28,28,28,28,28,28,28,]),'while_loop':([17,69,107,180,201,203,204,205,206,213,],[29,29,29,29,29,29,29,29,29,29,]),'function_move':([17,69,107,180,201,203,204,205,206,213,],[30,30,30,30,30,30,30,30,30,30,]),'function_delay':([17,69,107,180,201,203,204,205,206,213,],[31,31,31,31,31,31,31,31,31,31,]),'function_print':([17,69,107,180,201,203,204,205,206,213,],[32,32,32,32,32,32,32,32,32,32,]),'function_call':([17,33,34,46,48,65,69,83,106,107,108,175,180,192,201,203,204,205,206,213,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'bool_operator':([26,59,60,71,73,86,109,139,194,200,],[48,48,48,48,48,48,48,48,48,48,]),'param_expressions':([46,106,],[70,137,]),'operator':([61,],[76,]),'fingers':([66,95,96,115,151,153,],[87,117,119,150,117,117,]),'hand':([66,],[88,]),'fingerL_A':([66,],[95,]),'Cstring':([68,],[102,]),'stringL_A':([68,],[103,]),'fingerL_B':([95,151,153,],[115,185,186,]),'fingerL_C':([95,115,151,153,],[116,149,116,116,]),'stringL_B':([103,122,124,126,128,167,168,169,170,],[130,158,159,160,161,188,189,190,191,]),'stringL_C':([103,122,124,126,128,130,167,168,169,170,],[131,131,131,131,131,162,131,131,131,131,]),'time_param':([120,],[154,]),'else_if':([138,214,],[171,215,]),'else_exp':([138,214,],[173,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_function','algorithm',2,'p_algorithm','Compiler.py',224),
  ('algorithm -> empty','algorithm',1,'p_algorithm','Compiler.py',225),
  ('algorithm_function -> method_def','algorithm_function',1,'p_algorithm_function','Compiler.py',234),
  ('algorithm_function -> function_def','algorithm_function',1,'p_algorithm_function','Compiler.py',235),
  ('var_type -> BOOLEAN_TXT','var_type',1,'p_var_type','Compiler.py',241),
  ('var_type -> INTEGER_TXT','var_type',1,'p_var_type','Compiler.py',242),
  ('function_def -> FUNCTION VARIABLE OPEN_P parameters CLOSE_P ARROW var_type SB1 statement SB2','function_def',10,'p_function_def','Compiler.py',249),
  ('method_def -> FUNCTION VARIABLE OPEN_P parameters CLOSE_P SB1 statement SB2','method_def',8,'p_method_def','Compiler.py',255),
  ('parameters -> parameters COMMA parameters','parameters',3,'p_parameters','Compiler.py',261),
  ('parameters -> VARIABLE','parameters',1,'p_parameters','Compiler.py',262),
  ('parameters -> empty','parameters',1,'p_parameters','Compiler.py',263),
  ('operator -> PLUS','operator',1,'p_operator','Compiler.py',273),
  ('operator -> MINUS','operator',1,'p_operator','Compiler.py',274),
  ('operator -> INT_DIV','operator',1,'p_operator','Compiler.py',275),
  ('operator -> DIVIDE','operator',1,'p_operator','Compiler.py',276),
  ('operator -> EXP','operator',1,'p_operator','Compiler.py',277),
  ('operator -> MULTIPLY','operator',1,'p_operator','Compiler.py',278),
  ('fingers -> THUMB','fingers',1,'p_fingers','Compiler.py',284),
  ('fingers -> INDEX','fingers',1,'p_fingers','Compiler.py',285),
  ('fingers -> MIDDLE','fingers',1,'p_fingers','Compiler.py',286),
  ('fingers -> ANULAR','fingers',1,'p_fingers','Compiler.py',287),
  ('fingers -> PINKY','fingers',1,'p_fingers','Compiler.py',288),
  ('fingers -> ALL','fingers',1,'p_fingers','Compiler.py',289),
  ('fingerL_A -> SQ1 fingers COMMA fingerL_B','fingerL_A',4,'p_finger_list_A','Compiler.py',295),
  ('fingerL_B -> fingers COMMA fingerL_B','fingerL_B',3,'p_finger_list_B','Compiler.py',301),
  ('fingerL_B -> fingerL_C','fingerL_B',1,'p_finger_list_B','Compiler.py',302),
  ('fingerL_C -> fingers SQ2','fingerL_C',2,'p_finger_list_C','Compiler.py',311),
  ('fingerL_C -> empty','fingerL_C',1,'p_finger_list_C','Compiler.py',312),
  ('hand -> fingerL_A fingerL_B fingerL_C','hand',3,'p_hand_control','Compiler.py',318),
  ('function_move -> MOVE OPEN_P fingers COMMA BOOLEAN CLOSE_P','function_move',6,'p_function_move','Compiler.py',324),
  ('function_move -> MOVE OPEN_P fingers COMMA VARIABLE CLOSE_P','function_move',6,'p_function_move','Compiler.py',325),
  ('function_move -> MOVE OPEN_P hand COMMA BOOLEAN CLOSE_P','function_move',6,'p_function_move','Compiler.py',326),
  ('function_move -> MOVE OPEN_P hand COMMA VARIABLE CLOSE_P','function_move',6,'p_function_move','Compiler.py',327),
  ('stringL_A -> STR COMMA stringL_B','stringL_A',3,'p_string_list_A','Compiler.py',333),
  ('stringL_A -> VARIABLE COMMA stringL_B','stringL_A',3,'p_string_list_A','Compiler.py',334),
  ('stringL_A -> BOOLEAN COMMA stringL_B','stringL_A',3,'p_string_list_A','Compiler.py',335),
  ('stringL_A -> INT COMMA stringL_B','stringL_A',3,'p_string_list_A','Compiler.py',336),
  ('stringL_B -> STR COMMA stringL_B','stringL_B',3,'p_string_list_B','Compiler.py',342),
  ('stringL_B -> VARIABLE COMMA stringL_B','stringL_B',3,'p_string_list_B','Compiler.py',343),
  ('stringL_B -> INT COMMA stringL_B','stringL_B',3,'p_string_list_B','Compiler.py',344),
  ('stringL_B -> BOOLEAN COMMA stringL_B','stringL_B',3,'p_string_list_B','Compiler.py',345),
  ('stringL_B -> stringL_C','stringL_B',1,'p_string_list_B','Compiler.py',346),
  ('stringL_C -> STR','stringL_C',1,'p_string_list_C','Compiler.py',355),
  ('stringL_C -> VARIABLE','stringL_C',1,'p_string_list_C','Compiler.py',356),
  ('stringL_C -> BOOLEAN','stringL_C',1,'p_string_list_C','Compiler.py',357),
  ('stringL_C -> INT','stringL_C',1,'p_string_list_C','Compiler.py',358),
  ('stringL_C -> empty','stringL_C',1,'p_string_list_C','Compiler.py',359),
  ('Cstring -> stringL_A stringL_B stringL_C','Cstring',3,'p_string_creator','Compiler.py',365),
  ('function_print -> PRINT OPEN_P STR CLOSE_P','function_print',4,'p_function_print','Compiler.py',371),
  ('function_print -> PRINT OPEN_P VARIABLE CLOSE_P','function_print',4,'p_function_print','Compiler.py',372),
  ('function_print -> PRINT OPEN_P BOOLEAN CLOSE_P','function_print',4,'p_function_print','Compiler.py',373),
  ('function_print -> PRINT OPEN_P INT CLOSE_P','function_print',4,'p_function_print','Compiler.py',374),
  ('function_print -> PRINT OPEN_P Cstring CLOSE_P','function_print',4,'p_function_print','Compiler.py',375),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','Compiler.py',382),
  ('bool_operator -> EQUALS_EQUALS','bool_operator',1,'p_bool_operator','Compiler.py',388),
  ('bool_operator -> DISTINCT','bool_operator',1,'p_bool_operator','Compiler.py',389),
  ('bool_operator -> LESS_EQUAL','bool_operator',1,'p_bool_operator','Compiler.py',390),
  ('bool_operator -> MORE_EQUAL','bool_operator',1,'p_bool_operator','Compiler.py',391),
  ('bool_operator -> MORE_THAN','bool_operator',1,'p_bool_operator','Compiler.py',392),
  ('bool_operator -> LESS_THAN','bool_operator',1,'p_bool_operator','Compiler.py',393),
  ('expression -> expression bool_operator expression','expression',3,'p_expression_bool','Compiler.py',400),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','Compiler.py',406),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2','for_loop',9,'p_for_loop','Compiler.py',414),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2','for_loop',9,'p_for_loop','Compiler.py',415),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2','for_loop',9,'p_for_loop','Compiler.py',416),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2','for_loop',9,'p_for_loop','Compiler.py',417),
  ('if_else -> IF expression SB1 statement SB2 else_if','if_else',6,'p_if_else','Compiler.py',424),
  ('else_if -> ELSE IF expression SB1 statement SB2 else_if','else_if',7,'p_else_if','Compiler.py',432),
  ('else_if -> else_exp','else_if',1,'p_else_if','Compiler.py',433),
  ('else_exp -> ELSE SB1 statement SB2','else_exp',4,'p_else_exp','Compiler.py',444),
  ('else_exp -> empty','else_exp',1,'p_else_exp','Compiler.py',445),
  ('statement -> statement statement_line','statement',2,'p_statement','Compiler.py',457),
  ('statement -> empty','statement',1,'p_statement','Compiler.py',458),
  ('statement_line -> if_else','statement_line',1,'p_statement_line','Compiler.py',465),
  ('statement_line -> expression PyC','statement_line',2,'p_statement_line','Compiler.py',466),
  ('statement_line -> var_assign PyC','statement_line',2,'p_statement_line','Compiler.py',467),
  ('statement_line -> for_loop','statement_line',1,'p_statement_line','Compiler.py',468),
  ('statement_line -> while_loop','statement_line',1,'p_statement_line','Compiler.py',469),
  ('statement_line -> function_move PyC','statement_line',2,'p_statement_line','Compiler.py',470),
  ('statement_line -> function_delay PyC','statement_line',2,'p_statement_line','Compiler.py',471),
  ('statement_line -> function_print PyC','statement_line',2,'p_statement_line','Compiler.py',472),
  ('time_param -> SEG','time_param',1,'p_time_param','Compiler.py',478),
  ('time_param -> MIL','time_param',1,'p_time_param','Compiler.py',479),
  ('time_param -> MIN','time_param',1,'p_time_param','Compiler.py',480),
  ('function_delay -> DELAY OPEN_P INT COMMA time_param CLOSE_P','function_delay',6,'p_function_delay','Compiler.py',486),
  ('statement_line -> RETURN expression PyC','statement_line',3,'p_statement_line_return','Compiler.py',493),
  ('while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2','while_loop',7,'p_while_loop','Compiler.py',499),
  ('empty -> <empty>','empty',0,'p_empty','Compiler.py',505),
  ('expression -> INT','expression',1,'p_expression_int_boolean','Compiler.py',512),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','Compiler.py',513),
  ('expression -> function_call','expression',1,'p_expression_int_boolean','Compiler.py',514),
  ('expression -> VARIABLE','expression',1,'p_expression_var','Compiler.py',521),
  ('function_call -> VARIABLE OPEN_P param_expressions CLOSE_P','function_call',4,'p_function_call','Compiler.py',527),
  ('param_expressions -> param_expressions COMMA param_expressions','param_expressions',3,'p_param_expresions','Compiler.py',533),
  ('param_expressions -> expression','param_expressions',1,'p_param_expresions','Compiler.py',534),
  ('param_expressions -> empty','param_expressions',1,'p_param_expresions','Compiler.py',535),
]
